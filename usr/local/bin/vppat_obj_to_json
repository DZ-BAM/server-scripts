#! /usr/bin/env python3
"""Convert spawn object definition from
VPPAdminTools to TraderPlus JSON config entries.
"""

from __future__ import annotations
from argparse import ArgumentParser, Namespace
from json import dumps
from pathlib import Path
from re import Match, fullmatch
from typing import Iterable, Iterator, NamedTuple


REGEX = r'SpawnObject\(\s"(.+)",\s"(.+)\s(.+)\s(.+)",\s"(.+)\s(.+)\s(.+)"\s\);'


class Vector3d(NamedTuple):
    """Represents a 3D-vector."""
    
    x: float
    y: float
    z: float


class SpawnObject(NamedTuple):
    """Represents a spawn object."""
    
    name: str
    position: Vector3d
    orientation: Vector3d
        
    @classmethod
    def from_regex(cls, match: Match) -> SpawnObject:
        """Creates a SpawnObject from match object."""
        name, x, y, z, yaw, pitch, roll = match.groups()
        return cls(
            name,
            Vector3d(float(x), float(y), float(z)),
            Vector3d(
                float(yaw) % 360,
                float(pitch) % 360,
                float(roll) % 360
            )
        )

    def to_json(self) -> dict[str, str | Vector3d]:
        """Returns a JSON-ish dict."""
        return {
            "ObjectName": self.name,
            "Position": self.position,
            "Orientation": self.orientation
        }


def read_file(filename: Path) -> Iterator[SpawnObject]:
    """Reads the given file into a SpawnObject."""
    
    with filename.open('r', encoding='ascii') as file:
        for line in file:
            if match := fullmatch(REGEX, line.strip()):
                yield SpawnObject.from_regex(match)


def read_files(files: Iterable[Path]) -> Iterator[SpawnObject]:
    """Reads the given files into SpawnObjects."""
    
    for file in files:
        yield from read_file(file)


def parse_args(description: str = __doc__) -> Namespace:
    """Parses the command line arguments."""
    
    parser = ArgumentParser(description=description)
    parser.add_argument('file', nargs='+', type=Path)
    return parser.parse_args()


def main() -> None:
    """Runs the main program."""
    
    args = parse_args()
    json = [spawn_object.to_json() for spawn_object in read_files(args.file)]
    print(dumps(json, indent=4))


if __name__ == '__main__':
    main()
